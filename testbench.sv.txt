// Code your testbench here
// or browse Examples

module TestBench();
  reg inp_0, inp_1;
  reg [3:0] inp_2;

  Main DUT0(inp_0, inp_1, inp_2);

  initial begin
    // VCD generation commands
    $dumpfile("dump.vcd");
    $dumpvars(0, TestBench);

    inp_0 = 0;
    inp_1 = 0;
    inp_2 = 0;

    #15

    #10

    $finish;
  end

  // Clock generation
  always begin
    #5 inp_1 = ~inp_1;
  end
endmodule

module Main(inp_0, inp_1, inp_2);
  input inp_0, inp_1;
  input [3:0] inp_2;
  wire Counter_2_Zero, Counter_1_Zero;
  wire [3:0] Counter_2_Value, Counter_1_Value, Counter_0_Value;
  Counter #(4) Counter_2(Counter_2_Value, Counter_2_Zero, inp_2, inp_1, inp_0);
  Counter #(4) Counter_1(Counter_1_Value, Counter_1_Zero, inp_2, Counter_2_Zero, inp_0);
  Counter #(4) Counter_0(Counter_0_Value, , inp_2, Counter_1_Zero, inp_0);

  always @ (*)
    $display("HexDisplay:HexDisplay_0=%d", Counter_0_Value);

  always @ (*)
    $display("HexDisplay:HexDisplay_1=%d", Counter_1_Value);

  always @ (*)
    $display("HexDisplay:HexDisplay_2=%d", Counter_2_Value);
endmodule

module Counter(val, zero, max, clk, rst);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] val;
  output reg zero;
  input [WIDTH-1:0] max;
  input clk, rst;

  initial
    val = 0;

  always @ (val)
    if (val == 0)
      zero = 1;
    else
      zero = 0;

  always @ (posedge clk or posedge rst) begin
    if (rst)
      val <= 0;
    else
      if (val == max)
        val <= 0;
      else
        val <= val + 1;
  end
endmodule